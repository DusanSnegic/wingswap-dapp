/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ReferralInterface extends utils.Interface {
  functions: {
    "setMarketingAddress(address)": FunctionFragment;
    "setRefFee(uint256,uint256)": FunctionFragment;
    "setReferral(address)": FunctionFragment;
    "getMarketingAddress()": FunctionFragment;
    "getReferral(address)": FunctionFragment;
    "getRefFee()": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "owner()": FunctionFragment;
    "refFee()": FunctionFragment;
    "refInfo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setMarketingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setReferral", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMarketingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReferral", values: [string]): string;
  encodeFunctionData(functionFragment: "getRefFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "refFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "refInfo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "setMarketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRefFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRefFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refInfo", data: BytesLike): Result;

  events: {
    "SetMarketingAddress(address)": EventFragment;
    "SetRefFee(uint256,uint256)": EventFragment;
    "SetReferral(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetMarketingAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRefFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferral"): EventFragment;
}

export type SetMarketingAddressEvent = TypedEvent<
  [string],
  { markeingAddress: string }
>;

export type SetMarketingAddressEventFilter =
  TypedEventFilter<SetMarketingAddressEvent>;

export type SetRefFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { percent: BigNumber; divisor: BigNumber }
>;

export type SetRefFeeEventFilter = TypedEventFilter<SetRefFeeEvent>;

export type SetReferralEvent = TypedEvent<
  [string, string],
  { addr: string; referralAddr: string }
>;

export type SetReferralEventFilter = TypedEventFilter<SetReferralEvent>;

export interface Referral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setMarketingAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefFee(
      _percent: BigNumberish,
      _divisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferral(
      _referralAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarketingAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { _marketingAddr: string }>;

    getReferral(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { refAddr: string }>;

    getRefFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _percent: BigNumber; _divisor: BigNumber }
    >;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { percent: BigNumber; divisor: BigNumber }
    >;

    refInfo(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  setMarketingAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefFee(
    _percent: BigNumberish,
    _divisor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferral(
    _referralAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarketingAddress(overrides?: CallOverrides): Promise<string>;

  getReferral(_addr: string, overrides?: CallOverrides): Promise<string>;

  getRefFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _percent: BigNumber; _divisor: BigNumber }
  >;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  refFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { percent: BigNumber; divisor: BigNumber }
  >;

  refInfo(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    setMarketingAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefFee(
      _percent: BigNumberish,
      _divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferral(
      _referralAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketingAddress(overrides?: CallOverrides): Promise<string>;

    getReferral(_addr: string, overrides?: CallOverrides): Promise<string>;

    getRefFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _percent: BigNumber; _divisor: BigNumber }
    >;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    refFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { percent: BigNumber; divisor: BigNumber }
    >;

    refInfo(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetMarketingAddress(address)"(
      markeingAddress?: null
    ): SetMarketingAddressEventFilter;
    SetMarketingAddress(markeingAddress?: null): SetMarketingAddressEventFilter;

    "SetRefFee(uint256,uint256)"(
      percent?: BigNumberish | null,
      divisor?: null
    ): SetRefFeeEventFilter;
    SetRefFee(
      percent?: BigNumberish | null,
      divisor?: null
    ): SetRefFeeEventFilter;

    "SetReferral(address,address)"(
      addr?: string | null,
      referralAddr?: null
    ): SetReferralEventFilter;
    SetReferral(
      addr?: string | null,
      referralAddr?: null
    ): SetReferralEventFilter;
  };

  estimateGas: {
    setMarketingAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefFee(
      _percent: BigNumberish,
      _divisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferral(
      _referralAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarketingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getReferral(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRefFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refFee(overrides?: CallOverrides): Promise<BigNumber>;

    refInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    setMarketingAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefFee(
      _percent: BigNumberish,
      _divisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferral(
      _referralAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarketingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferral(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
